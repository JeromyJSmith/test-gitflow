name: Develop branch gitflow

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check branch name
  branch-name-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch name
        run: |
          # Get the source and target branches for the PR
          SOURCE_BRANCH=$(jq -r .pull_request.head.ref "$GITHUB_EVENT_PATH")
          TARGET_BRANCH=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH")

          echo "Source branch: $SOURCE_BRANCH"
          echo "Target branch: $TARGET_BRANCH"

          if [[ "$SOURCE_BRANCH" =~ ^(main|feature/.*|hotfix/.*|release/[0-9]+\.[0-9]+\.[0-9]+(rc[0-9]+)?)$ ]]; then
            echo "Branch name is valid"
          else
            echo "Invalid branch name. Branches must follow the gitflow naming convention to be allowed to merge into the develop branch."
            exit 1
          fi

  # Run linters on base Python version
  linting:
    name: General Linting
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout Code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # actions/checkout v3.0.2

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-linting-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-linting-${{ hashFiles('**/poetry.lock') }}

      - run: pip install bandit black codespell flake8 mypy==0.982 pyupgrade safety pylint==2.15.2 packaging==22
      - run: pip install types-pytz types-requests types-termcolor types-tabulate types-PyYAML types-python-dateutil types-setuptools types-six
      - run: bandit -x ./tests -r . || true
      #- run: black --diff --check .
      - run: codespell --ignore-words-list=commun,statics,ro,zar,zlot,jewl,ba,buil,coo,ether,hist,hsi,mape,navagation,operatio,pres,ser,yeld,shold,ist,varian,datas,ake,creat,vie,hel,ket,toke,certi,buidl,ot,te --quiet-level=2 --skip=./tests,.git,*.css,*.csv,*.html,*.ini,*.ipynb,*.js,*.json,*.lock,*.scss,*.txt,*.yaml,./build/pyinstaller,./website/config.toml
      - run: flake8 . --count --ignore=E203,W503 --max-line-length=122 --show-source --statistics --exclude ./build/pyinstaller,./website/content
      - run: mypy --ignore-missing-imports openbb_terminal
      - run: shopt -s globstar && pyupgrade --py38-plus **/*.py
      - run: safety check
      - run: |
          pylint terminal.py openbb_terminal tests

  # Run Markdown link checker
  markdown-link-check:
    name: Markdown Linting
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - uses: actions/checkout@v3
        name: Check out the code
      - name: Lint Code Base
        uses: docker://avtodev/markdown-lint:v1
        with:
          args: "./*.md ./changelogs/*.md ./openbb_terminal/**/*.md ./discordbot/**/*.md"

  # Run tests on base Python version
  base-test:
    name: Base Tests - Ubuntu-latest - Python 3.9
    needs: [branch-name-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-v1-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E optimization

      - name: Run tests
        env:
          MPLBACKEND: Agg
        run: |
          source $VENV
          pytest tests/ --optimization

      - name: Start Terminal and exit
        run: |
          source $VENV
          python terminal.py

  tests-python:
    name: Vanilla Python Tests - (${{ matrix.python-version }}, ${{ matrix.os }})
    needs: base-test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-v1-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E optimization

      - name: List installed packages
        shell: bash -l {0}
        run: |
          source $VENV
          pip list

      - name: Run tests
        env:
          MPLBACKEND: Agg
        run: |
          source $VENV
          pytest tests/ --optimization

      - name: Start Terminal and exit
        run: |
          source $VENV
          python terminal.py
